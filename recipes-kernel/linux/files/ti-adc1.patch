commit bb26d567f5b17992184d74dbe1198251f651495f
Author: Dmitrij Belousov <dmitrij.belousov@gmail.com>
Date:   Sun Mar 3 18:11:46 2019 +0100

    adc1

diff --git a/arch/arm/boot/dts/am4372.dtsi b/arch/arm/boot/dts/am4372.dtsi
index ed1bc39ef188..d31a12066d35 100644
--- a/arch/arm/boot/dts/am4372.dtsi
+++ b/arch/arm/boot/dts/am4372.dtsi
@@ -922,6 +922,16 @@
 			};
 
 		};
+		adc1:   adc1@4834c000 {
+			compatible = "ti,am437x-adc1";
+			#io-channel-cells = <1>;
+			reg = <0x4834c000 0x1000>;
+			ti,hwmods = "adc1";
+			clocks = <&l3s_gclk>;
+			interrupts = <GIC_SPI 16 IRQ_TYPE_LEVEL_HIGH>;
+			clock-names = "fck";
+			status = "disabled";
+		};
 
 		sham: sham@53100000 {
 			compatible = "ti,omap5-sham";
diff --git a/arch/arm/mach-omap2/omap_hwmod_43xx_data.c b/arch/arm/mach-omap2/omap_hwmod_43xx_data.c
index afbce1f6f641..cd0bfd47b514 100644
--- a/arch/arm/mach-omap2/omap_hwmod_43xx_data.c
+++ b/arch/arm/mach-omap2/omap_hwmod_43xx_data.c
@@ -22,6 +22,7 @@
 #include "omap_hwmod_common_data.h"
 #include "hdq1w.h"
 
+#define CLKCTRL(oh, clkctrl) ((oh).prcm.omap4.clkctrl_offs = (clkctrl))
 
 /* IP blocks */
 static struct omap_hwmod am43xx_emif_hwmod = {
@@ -442,6 +443,32 @@ static struct omap_hwmod am43xx_adc_tsc_hwmod = {
 	},
 };
 
+static struct omap_hwmod_class_sysconfig am437x_adc1_sysc = {
+        .rev_offs   = 0x00,
+        .sysc_offs  = 0x10,
+        .sysc_flags = SYSC_HAS_SIDLEMODE,
+        .idlemodes  = (SIDLE_FORCE | SIDLE_NO | SIDLE_SMART |
+                                   SIDLE_SMART_WKUP),
+        .sysc_fields = &omap_hwmod_sysc_type2,
+};
+
+static struct omap_hwmod_class am437x_adc1_hwmod_class = {
+        .name = "adc1",
+        .sysc = &am437x_adc1_sysc,
+};
+
+static struct omap_hwmod am437x_adc1_hwmod = {
+        .name       = "adc1",
+        .class      = &am437x_adc1_hwmod_class,
+        .clkdm_name = "l3s_clkdm",
+        .main_clk   = "l3s_gclk",
+        .prcm       = {
+                .omap4  = {
+                        .modulemode = MODULEMODE_SWCTRL,
+                },
+        },
+};
+
 static struct omap_hwmod_class_sysconfig am43xx_des_sysc = {
 	.rev_offs	= 0x30,
 	.sysc_offs	= 0x34,
@@ -678,6 +705,13 @@ static struct omap_hwmod_ocp_if am43xx_l4_wkup__adc_tsc = {
 	.user           = OCP_USER_MPU,
 };
 
+static struct omap_hwmod_ocp_if am437x_l3_s__adc1 = {
+        .master     = &am33xx_l4_wkup_hwmod,
+        .slave      = &am437x_adc1_hwmod,
+        .clk        = "l4ls_gclk",
+        .user       = OCP_USER_MPU,
+};
+
 static struct omap_hwmod_ocp_if am43xx_l4_hs__cpgmac0 = {
 	.master		= &am43xx_l4_hs_hwmod,
 	.slave		= &am33xx_cpgmac0_hwmod,
@@ -940,6 +974,7 @@ static struct omap_hwmod_ocp_if *am43xx_hwmod_ocp_ifs[] __initdata = {
 	&am43xx_l4_wkup__gpio0,
 	&am43xx_l4_wkup__wd_timer1,
 	&am43xx_l4_wkup__adc_tsc,
+    &am437x_l3_s__adc1,
 	&am43xx_l3_s__qspi,
 	&am33xx_l4_per__dcan0,
 	&am33xx_l4_per__dcan1,
@@ -1008,7 +1043,7 @@ static struct omap_hwmod_ocp_if *am43xx_rtc_hwmod_ocp_ifs[] __initdata = {
 int __init am43xx_hwmod_init(void)
 {
 	int ret;
-
+	CLKCTRL(am437x_adc1_hwmod, AM43XX_CM_PER_ADC1_CLKCTRL_OFFSET);
 	omap_hwmod_am43xx_reg();
 	omap_hwmod_init();
 	ret = omap_hwmod_register_links(am43xx_hwmod_ocp_ifs);
diff --git a/arch/arm/mach-omap2/prcm43xx.h b/arch/arm/mach-omap2/prcm43xx.h
index 7078a61c1d3f..407767ddf592 100644
--- a/arch/arm/mach-omap2/prcm43xx.h
+++ b/arch/arm/mach-omap2/prcm43xx.h
@@ -112,6 +112,7 @@
 #define AM43XX_CM_WKUP_I2C0_CLKCTRL_OFFSET		0x0340
 #define AM43XX_CM_WKUP_GPIO0_CLKCTRL_OFFSET		0x0368
 #define AM43XX_CM_WKUP_ADC_TSC_CLKCTRL_OFFSET		0x0120
+#define AM43XX_CM_PER_ADC1_CLKCTRL_OFFSET		0x0230
 #define AM43XX_CM_WKUP_WDT1_CLKCTRL_OFFSET		0x0338
 #define AM43XX_CM_WKUP_L4WKUP_CLKCTRL_OFFSET		0x0220
 #define AM43XX_CM_RTC_RTC_CLKCTRL_OFFSET		0x0020
diff --git a/drivers/iio/adc/Makefile b/drivers/iio/adc/Makefile
index 7a40c04c311f..eb3425a849e5 100644
--- a/drivers/iio/adc/Makefile
+++ b/drivers/iio/adc/Makefile
@@ -48,7 +48,7 @@ obj-$(CONFIG_TI_ADC128S052) += ti-adc128s052.o
 obj-$(CONFIG_TI_ADC161S626) += ti-adc161s626.o
 obj-$(CONFIG_TI_ADS1015) += ti-ads1015.o
 obj-$(CONFIG_TI_ADS8688) += ti-ads8688.o
-obj-$(CONFIG_TI_AM335X_ADC) += ti_am335x_adc.o
+obj-$(CONFIG_TI_AM335X_ADC) += ti_am335x_adc.o ti_am437x_adc1.o
 obj-$(CONFIG_TWL4030_MADC) += twl4030-madc.o
 obj-$(CONFIG_TWL6030_GPADC) += twl6030-gpadc.o
 obj-$(CONFIG_VF610_ADC) += vf610_adc.o
diff --git a/drivers/iio/adc/ti_am437x_adc1.c b/drivers/iio/adc/ti_am437x_adc1.c
new file mode 100644
index 000000000000..1765829b5b04
--- /dev/null
+++ b/drivers/iio/adc/ti_am437x_adc1.c
@@ -0,0 +1,499 @@
+/*
+ * TI ADC IIO driver
+ *
+ * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/err.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/clk.h>
+#include <linux/iio/iio.h>
+#include <linux/regmap.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/iio/machine.h>
+#include <linux/iio/driver.h>
+#include <linux/pm_runtime.h>
+#include <linux/delay.h>
+
+#include <linux/mfd/ti_am437x_adc1.h>
+
+static const struct regmap_config ti_adc_regmap_config = {
+	.name = "ti_adc1",
+	.reg_bits = 32,
+	.reg_stride = 4,
+	.val_bits = 32,
+};
+
+static unsigned int tiadc_readl(struct ti_adc1_dev *adc, unsigned int reg)
+{
+	return readl(adc->adc_base + reg);
+}
+
+static void tiadc_writel(struct ti_adc1_dev *adc, unsigned int reg,
+					unsigned int val)
+{
+	writel(val, adc->adc_base + reg);
+}
+
+static void am437x_adc_se_update(struct ti_adc1_dev *adc, u32 val)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&adc->reg_lock, flags);
+	if (!adc->adc_pending)
+		tiadc_writel(adc, REG_SE, adc->reg_se_cache | val);
+	spin_unlock_irqrestore(&adc->reg_lock, flags);
+}
+
+static void am437x_adc_se_set_cont(struct ti_adc1_dev *adc, u32 val)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&adc->reg_lock, flags);
+	adc->reg_se_cache |= val;
+	spin_unlock_irqrestore(&adc->reg_lock, flags);
+	am437x_adc_se_update(adc, 0);
+}
+
+static void am437x_adc_se_set_once(struct ti_adc1_dev *adc, u32 val)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&adc->reg_lock, flags);
+	adc->adc_pending = true;
+	tiadc_writel(adc, REG_SE, adc->reg_se_cache | val);
+	spin_unlock_irqrestore(&adc->reg_lock, flags);
+}
+
+static void am437x_adc_se_done(struct ti_adc1_dev *adc)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&adc->reg_lock, flags);
+	adc->adc_pending = false;
+	spin_unlock_irqrestore(&adc->reg_lock, flags);
+}
+
+static void am437x_adc_se_clr(struct ti_adc1_dev *adc, u32 val)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&adc->reg_lock, flags);
+	adc->reg_se_cache &= ~val;
+	spin_unlock_irqrestore(&adc->reg_lock, flags);
+	am437x_adc_se_update(adc, 0);
+}
+
+static u32 get_adc_step_mask(struct ti_adc1_dev *adc_dev)
+{
+	u32 step_en;
+
+	step_en = ((1 << adc_dev->channels) - 1);
+	step_en <<= TOTAL_STEPS - adc_dev->channels + 1;
+	return step_en;
+}
+
+static u32 get_adc_chan_step_mask(struct ti_adc1_dev *adc_dev,
+		struct iio_chan_spec const *chan)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(adc_dev->channel_step); i++) {
+		if (chan->channel == adc_dev->channel_line[i]) {
+			u32 step;
+
+			step = adc_dev->channel_step[i];
+			/* +1 for the charger */
+			return 1 << (step + 1);
+		}
+	}
+	WARN_ON(1);
+	return 0;
+}
+
+static void tiadc_step_config(struct ti_adc1_dev *adc_dev)
+{
+	unsigned int stepconfig;
+	int i, steps;
+
+	/*
+	 * There are 16 configurable steps and 8 analog input
+	 * lines available
+	 *
+	 * Steps backwards i.e. from 16 towards 0 are used by ADC
+	 * depending on number of input lines needed.
+	 * Channel would represent which analog input
+	 * needs to be given to ADC to digitalize data.
+	 */
+
+	steps = TOTAL_STEPS - adc_dev->channels;
+	stepconfig = STEPCONFIG_AVG_16 | STEPCONFIG_FIFO1 | STEPCHARGE_RFP(0x3);
+	stepconfig &= ~STEPCONFIG_DIFFCNTRL;
+
+	for (i = 0; i < adc_dev->channels; i++) {
+		int chan;
+
+		chan = adc_dev->channel_line[i];
+		tiadc_writel(adc_dev, REG_STEPCONFIG(steps),
+				stepconfig | STEPCONFIG_INP(chan));
+		tiadc_writel(adc_dev, REG_STEPDELAY(steps),
+				STEPCONFIG_OPENDLY);
+		adc_dev->channel_step[i] = steps;
+		steps++;
+	}
+}
+
+static const char * const chan_name_ain[] = {
+	"AIN0",
+	"AIN1",
+	"AIN2",
+	"AIN3",
+	"AIN4",
+	"AIN5",
+	"AIN6",
+	"AIN7",
+};
+
+static int tiadc_channel_init(struct iio_dev *indio_dev, int channels)
+{
+	struct ti_adc1_dev *adc_dev = iio_priv(indio_dev);
+	struct iio_chan_spec *chan_array;
+	struct iio_chan_spec *chan;
+	int i;
+
+	indio_dev->num_channels = channels;
+	chan_array = kcalloc(channels,
+			sizeof(struct iio_chan_spec), GFP_KERNEL);
+	if (chan_array == NULL)
+		return -ENOMEM;
+
+	chan = chan_array;
+	for (i = 0; i < channels; i++, chan++) {
+
+		chan->type = IIO_VOLTAGE;
+		chan->indexed = 1;
+		chan->channel = adc_dev->channel_line[i];
+		chan->info_mask_separate = BIT(IIO_CHAN_INFO_RAW);
+		chan->datasheet_name = chan_name_ain[chan->channel];
+		chan->scan_type.sign = 'u';
+		chan->scan_type.realbits = 12;
+		chan->scan_type.storagebits = 32;
+	}
+
+	indio_dev->channels = chan_array;
+
+	return 0;
+}
+
+static void tiadc_channels_remove(struct iio_dev *indio_dev)
+{
+	kfree(indio_dev->channels);
+}
+
+static int tiadc_read_raw(struct iio_dev *indio_dev,
+		struct iio_chan_spec const *chan,
+		int *val, int *val2, long mask)
+{
+	struct ti_adc1_dev *adc_dev = iio_priv(indio_dev);
+	int i, map_val;
+	unsigned int fifo1count, read, stepid;
+	u32 step = UINT_MAX;
+	bool found = false;
+	u32 step_en;
+	unsigned long timeout = jiffies + usecs_to_jiffies
+				(IDLE_TIMEOUT * adc_dev->channels);
+
+	
+	step_en = get_adc_chan_step_mask(adc_dev, chan);
+	if (!step_en)
+		return -EINVAL;
+
+	am437x_adc_se_set_once(adc_dev, step_en);
+
+	/* Wait for Fifo threshold interrupt */
+	while (!(tiadc_readl(adc_dev, REG_RAWIRQSTATUS) & IRQENB_FIFO1THRES)) {
+		if (time_after(jiffies, timeout)) {
+			am437x_adc_se_done(adc_dev);
+			return -EAGAIN;
+		}
+	}
+	map_val = chan->channel + TOTAL_CHANNELS;
+
+	/*
+	 * When the sub-system is first enabled,
+	 * the sequencer will always start with the
+	 * lowest step (1) and continue until step (16).
+	 * For ex: If we have enabled 4 ADC channels and
+	 * currently use only 1 out of them, the
+	 * sequencer still configures all the 4 steps,
+	 * leading to 3 unwanted data.
+	 * Hence we need to flush out this data.
+	 */
+
+	for (i = 0; i < ARRAY_SIZE(adc_dev->channel_step); i++) {
+		if (chan->channel == adc_dev->channel_line[i]) {
+			step = adc_dev->channel_step[i];
+			break;
+		}
+	}
+	if (WARN_ON_ONCE(step == UINT_MAX)) {
+		am437x_adc_se_done(adc_dev);
+		return -EINVAL;
+	}
+
+	fifo1count = tiadc_readl(adc_dev, REG_FIFO1CNT);
+	for (i = 0; i < fifo1count; i++) {
+		read = tiadc_readl(adc_dev, REG_FIFO1);
+		stepid = read & FIFOREAD_CHNLID_MASK;
+		stepid = stepid >> 0x10;
+
+		if (stepid == map_val) {
+			read = (read & FIFOREAD_DATA_MASK) >> 1;
+			found = true;
+			*val = read;
+		}
+	}
+
+	tiadc_writel(adc_dev, REG_IRQSTATUS, IRQENB_FIFO1THRES);
+	am437x_adc_se_done(adc_dev);
+
+	if (found == false)
+		return -EBUSY;
+
+	return IIO_VAL_INT;
+}
+
+static const struct iio_info tiadc_info = {
+	.read_raw = &tiadc_read_raw,
+	.driver_module = THIS_MODULE,
+};
+
+static int tiadc_probe(struct platform_device *pdev)
+{
+	struct iio_dev		*indio_dev;
+	struct ti_adc1_dev	*ti_adc1;
+	struct device_node	*node = pdev->dev.of_node;
+	struct property		*prop;
+	struct resource     *res;
+	struct clk          *clk;
+	const __be32		*cur;
+	int			err;
+	u32			val;
+	int			channels = 0;
+	int         clk_value, clock_rate;
+
+	if (!node) {
+		dev_err(&pdev->dev, "Could not find valid DT data.\n");
+		return -EINVAL;
+	}
+
+	indio_dev = devm_iio_device_alloc(&pdev->dev,
+					  sizeof(struct ti_adc1_dev));
+	if (indio_dev == NULL) {
+		dev_err(&pdev->dev, "failed to allocate iio device\n");
+		return -ENOMEM;
+	}
+	ti_adc1 = iio_priv(indio_dev);
+	ti_adc1->dev = &pdev->dev;
+
+	of_property_for_each_u32(node, "ti,adc-channels", prop, cur, val) {
+		ti_adc1->channel_line[channels] = val;
+		channels++;
+	}
+	ti_adc1->channels = channels;
+
+	/* Get memory resource */
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "no memory resource defined.\n");
+		return -EINVAL;
+	}
+
+	err = platform_get_irq(pdev, 0);
+	if (err < 0) {
+		dev_err(&pdev->dev, "no irq ID is specified.\n");
+		return err;
+	} else {
+		ti_adc1->irq = err;
+	}
+
+	/* Request memory region */
+	res = devm_request_mem_region(&pdev->dev,
+								  res->start, resource_size(res), pdev->name);
+	if (!res) {
+		dev_err(&pdev->dev, "failed to reserve registers.\n");
+		return -EBUSY;
+	}
+
+	/* IO memory remap */
+	ti_adc1->adc_base = devm_ioremap(&pdev->dev,
+									 res->start, resource_size(res));
+	if (!ti_adc1->adc_base) {
+		dev_err(&pdev->dev, "failed to map register.\n");
+		return -ENOMEM;
+	}
+
+	/* Initialize mmio */
+	ti_adc1->regmap_adc = devm_regmap_init_mmio(&pdev->dev,
+											   ti_adc1->adc_base,
+											   &ti_adc_regmap_config);
+	if (IS_ERR(ti_adc1->regmap_adc)) {
+		dev_err(&pdev->dev, "regmap init failed\n");
+		err = PTR_ERR(ti_adc1->regmap_adc);
+		return err;
+	}
+
+	/* Initialize spin lock */
+	spin_lock_init(&ti_adc1->reg_lock);
+	pm_runtime_enable(&pdev->dev);
+	pm_runtime_get_sync(&pdev->dev);
+
+	/* Clock setting */
+	clk = clk_get(&pdev->dev, "l3s_gclk");
+	if (IS_ERR(clk)) {
+		dev_err(&pdev->dev, "failed to get adc fck\n");
+		err = PTR_ERR(clk);
+		goto err_disable_clk;
+	}
+
+	clock_rate = clk_get_rate(clk);
+	clk_put(clk);
+	clk_value = clock_rate / ADC_CLK;
+	/* ADC1_CLKDIV needs to be configured to the value minus 1 */
+	clk_value = clk_value - 1;
+	tiadc_writel(ti_adc1, REG_CLKDIV, clk_value);
+
+	indio_dev->dev.parent = &pdev->dev;
+	indio_dev->name = dev_name(&pdev->dev);
+	indio_dev->modes = INDIO_DIRECT_MODE;
+	indio_dev->info = &tiadc_info;
+
+	tiadc_step_config(ti_adc1);
+	tiadc_writel(ti_adc1, REG_FIFO1THR, 1 - 1);
+
+	/*
+	 * Set the control register for enable adc1, power down
+	 * and bypass preamplifier, and store step id in the FIFO
+	 */
+	val = tiadc_readl(ti_adc1, REG_CTRL);
+	val |= (CNTRLREG_ADC1ENB | CNTRLREG_STEPIDTAG |
+			CNTRLREG_PREAMP_PD | CNTRLREG_PREAMP_BYPASS);
+	tiadc_writel(ti_adc1, REG_CTRL, val);
+
+	val = tiadc_readl(ti_adc1, REG_IDLECONFIG);
+	tiadc_writel(ti_adc1, REG_IDLECONFIG, val | STEPCHARGE_RFP(0x3));
+
+	err = tiadc_channel_init(indio_dev, ti_adc1->channels);
+	if (err < 0)
+		return err;
+
+	err = iio_device_register(indio_dev);
+	if (err)
+		goto err_free_channels;
+
+	platform_set_drvdata(pdev, indio_dev);
+
+	return 0;
+
+ err_free_channels:
+	tiadc_channels_remove(indio_dev);
+ err_disable_clk:
+	pm_runtime_put_sync(&pdev->dev);
+	pm_runtime_disable(&pdev->dev);
+	return err;
+}
+
+static int tiadc_remove(struct platform_device *pdev)
+{
+	struct iio_dev *indio_dev = platform_get_drvdata(pdev);
+	struct ti_adc1_dev *adc_dev = iio_priv(indio_dev);
+	u32 step_en;
+
+	iio_device_unregister(indio_dev);
+	tiadc_channels_remove(indio_dev);
+
+	step_en = get_adc_step_mask(adc_dev);
+	am437x_adc_se_clr(adc_dev, step_en);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int tiadc_suspend(struct device *dev)
+{
+	struct iio_dev *indio_dev = dev_get_drvdata(dev);
+	struct ti_adc1_dev *adc_dev = iio_priv(indio_dev);
+	unsigned int idle;
+
+	if (!device_may_wakeup(adc_dev->dev)) {
+		idle = tiadc_readl(adc_dev, REG_CTRL);
+		idle &= ~(CNTRLREG_TSCSSENB);
+		tiadc_writel(adc_dev, REG_CTRL, (idle |
+				CNTRLREG_POWERDOWN));
+	}
+
+	return 0;
+}
+
+static int tiadc_resume(struct device *dev)
+{
+	struct iio_dev *indio_dev = dev_get_drvdata(dev);
+	struct ti_adc1_dev *adc_dev = iio_priv(indio_dev);
+	unsigned int restore;
+
+	/* Make sure ADC is powered up */
+	restore = tiadc_readl(adc_dev, REG_CTRL);
+	restore &= ~(CNTRLREG_POWERDOWN);
+	tiadc_writel(adc_dev, REG_CTRL, restore);
+
+	tiadc_step_config(adc_dev);
+
+	return 0;
+}
+
+static const struct dev_pm_ops tiadc_pm_ops = {
+	.suspend = tiadc_suspend,
+	.resume = tiadc_resume,
+};
+#define TIADC_PM_OPS (&tiadc_pm_ops)
+#else
+#define TIADC_PM_OPS NULL
+#endif
+
+static const struct of_device_id ti_adc_dt_ids[] = {
+	{ .compatible = "ti,am437x-adc1", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, ti_adc_dt_ids);
+
+static struct platform_driver tiadc_driver = {
+	.driver = {
+		.name   = "TI-am437x-adc",
+		.owner	= THIS_MODULE,
+		.pm	= TIADC_PM_OPS,
+		.of_match_table = of_match_ptr(ti_adc_dt_ids),
+	},
+	.probe	= tiadc_probe,
+	.remove	= tiadc_remove,
+};
+module_platform_driver(tiadc_driver);
+
+MODULE_DESCRIPTION("TI ADC controller driver");
+MODULE_AUTHOR("MYiR <support@myirtech.com>");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/mfd/ti_am437x_adc1.h b/include/linux/mfd/ti_am437x_adc1.h
new file mode 100644
index 000000000000..388c303b111e
--- /dev/null
+++ b/include/linux/mfd/ti_am437x_adc1.h
@@ -0,0 +1,179 @@
+#ifndef __LINUX_TI_AM437X_ADC1_MFD_H
+#define __LINUX_TI_AM437X_ADC1_MFD_H
+
+/*
+ * TI ADC1 MFD driver
+ *
+ * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/mfd/core.h>
+
+#define REG_RAWIRQSTATUS	0x024
+#define REG_IRQSTATUS		0x028
+#define REG_IRQENABLE		0x02C
+#define REG_IRQCLR		0x030
+#define REG_IRQWAKEUP		0x034
+#define REG_CTRL		0x040
+#define REG_ADCFSM		0x044
+#define REG_CLKDIV		0x04C
+#define REG_SE			0x054
+#define REG_IDLECONFIG		0x058
+#define REG_CHARGECONFIG	0x05C
+#define REG_CHARGEDELAY		0x060
+#define REG_STEPCONFIG(n)	(0x64 + ((n) * 8))
+#define REG_STEPDELAY(n)	(0x68 + ((n) * 8))
+#define REG_FIFO0CNT		0xE4
+#define REG_FIFO0THR		0xE8
+#define REG_FIFO1CNT		0xF0
+#define REG_FIFO1THR		0xF4
+#define REG_FIFO0		0x100
+#define REG_FIFO1		0x200
+
+/*	Register Bitfields	*/
+/* IRQ wakeup enable */
+#define IRQWKUP_ENB		BIT(0)
+
+/* Step Enable */
+#define STEPENB_MASK		(0x1FFFF << 0)
+#define STEPENB(val)		((val) << 0)
+
+/* IRQ enable */
+#define IRQENB_HW_PEN		BIT(0)
+#define IRQENB_FIFO0THRES	BIT(2)
+#define IRQENB_FIFO1THRES	BIT(5)
+#define IRQENB_PENUP		BIT(9)
+
+/* Step Configuration */
+#define STEPCONFIG_MODE_MASK	(3 << 0)
+#define STEPCONFIG_MODE(val)	((val) << 0)
+#define STEPCONFIG_MODE_HWSYNC	STEPCONFIG_MODE(2)
+#define STEPCONFIG_AVG_MASK	(7 << 2)
+#define STEPCONFIG_AVG(val)	((val) << 2)
+#define STEPCONFIG_AVG_16	STEPCONFIG_AVG(4)
+#define STEPCONFIG_XPP		BIT(5)
+#define STEPCONFIG_XNN		BIT(6)
+#define STEPCONFIG_YPP		BIT(7)
+#define STEPCONFIG_YNN		BIT(8)
+#define STEPCONFIG_XNP		BIT(9)
+#define STEPCONFIG_YPN		BIT(10)
+#define STEPCONFIG_INM_MASK	(0xF << 15)
+#define STEPCONFIG_INM(val)	((val) << 15)
+#define STEPCONFIG_INM_ADCREFM	STEPCONFIG_INM(8)
+#define STEPCONFIG_INP_MASK	(0xF << 19)
+#define STEPCONFIG_INP(val)	((val) << 19)
+#define STEPCONFIG_INP_AN4	STEPCONFIG_INP(4)
+#define STEPCONFIG_INP_ADCREFM	STEPCONFIG_INP(8)
+#define STEPCONFIG_FIFO1	BIT(26)
+#define STEPCONFIG_DIFFCNTRL    BIT(25)
+
+/* Delay register */
+#define STEPDELAY_OPEN_MASK	(0x3FFFF << 0)
+#define STEPDELAY_OPEN(val)	((val) << 0)
+#define STEPCONFIG_OPENDLY	STEPDELAY_OPEN(0x098)
+#define STEPDELAY_SAMPLE_MASK	(0xFF << 24)
+#define STEPDELAY_SAMPLE(val)	((val) << 24)
+#define STEPCONFIG_SAMPLEDLY	STEPDELAY_SAMPLE(0)
+
+/* Charge Config */
+#define STEPCHARGE_RFP_MASK	(7 << 12)
+#define STEPCHARGE_RFP(val)	((val) << 12)
+#define STEPCHARGE_RFP_XPUL	STEPCHARGE_RFP(1)
+#define STEPCHARGE_INM_MASK	(0xF << 15)
+#define STEPCHARGE_INM(val)	((val) << 15)
+#define STEPCHARGE_INM_AN1	STEPCHARGE_INM(1)
+#define STEPCHARGE_INP_MASK	(0xF << 19)
+#define STEPCHARGE_INP(val)	((val) << 19)
+#define STEPCHARGE_RFM_MASK	(3 << 23)
+#define STEPCHARGE_RFM(val)	((val) << 23)
+#define STEPCHARGE_RFM_XNUR	STEPCHARGE_RFM(1)
+
+/* Charge delay */
+#define CHARGEDLY_OPEN_MASK	(0x3FFFF << 0)
+#define CHARGEDLY_OPEN(val)	((val) << 0)
+#define CHARGEDLY_OPENDLY	CHARGEDLY_OPEN(1)
+
+/* Control register */
+#define CNTRLREG_TSCSSENB	BIT(0)
+#define CNTRLREG_STEPID		BIT(1)
+#define CNTRLREG_STEPCONFIGWRT	BIT(2)
+#define CNTRLREG_POWERDOWN	BIT(4)
+#define CNTRLREG_AFE_CTRL_MASK	(3 << 5)
+#define CNTRLREG_AFE_CTRL(val)	((val) << 5)
+#define CNTRLREG_4WIRE		CNTRLREG_AFE_CTRL(1)
+#define CNTRLREG_5WIRE		CNTRLREG_AFE_CTRL(2)
+#define CNTRLREG_8WIRE		CNTRLREG_AFE_CTRL(3)
+#define CNTRLREG_ADC1ENB		BIT(0)
+#define CNTRLREG_STEPIDTAG      BIT(1)
+#define CNTRLREG_PREAMP_PD      BIT(5)
+#define CNTRLREG_PREAMP_BYPASS  BIT(6)
+
+/* FIFO READ Register */
+#define FIFOREAD_DATA_MASK (0xfff << 1)
+#define FIFOREAD_CHNLID_MASK (0xf << 16)
+
+/* Sequencer Status */
+#define SEQ_STATUS BIT(5)
+
+#define ADC_CLK			3000000
+#define TOTAL_STEPS		16
+#define TOTAL_CHANNELS		8
+
+/*
+* ADC runs at 3MHz, and it takes
+* 15 cycles to latch one data output.
+* Hence the idle time for ADC to
+* process one sample data would be
+* around 5 micro seconds.
+*/
+#define IDLE_TIMEOUT 5 /* microsec */
+
+#define TSCADC_CELLS		2
+
+struct ti_adc1_dev {
+	struct device *dev;
+	struct regmap *regmap_adc;
+	void __iomem *adc_base;
+	int irq;
+	int used_cells;	/* 1-2 */
+	int adc_cell;	/* -1 if not used */
+	struct mfd_cell cells[TSCADC_CELLS];
+	u32 reg_se_cache;
+	u32 pending_adc_val;
+	bool adc_pending;
+	spinlock_t reg_lock;
+
+	/* adc device */
+	struct adc_device *adc;
+
+	/* channels */
+	int channels;
+	u8 channel_line[8];
+	u8 channel_step[8];
+};
+
+/*
+static inline struct ti_adc1_dev *ti_adc1_dev_get(struct platform_device *p)
++{
+	struct ti_adc1_dev **adc_dev = p->dev.platform_data;
+
+	return *adc_dev;
++}
++*/
+/*
++void am335x_tsc_se_update(struct ti_tscadc_dev *tsadc, u32 val);
++void am335x_tsc_se_set_cont(struct ti_tscadc_dev *tsadc, u32 val);
++void am335x_tsc_se_adc_done(struct ti_tscadc_dev *tsadc);
++void am335x_tsc_se_set_once(struct ti_tscadc_dev *tsadc, u32 val);
++void am335x_tsc_se_clr(struct ti_tscadc_dev *tsadc, u32 val);
++*/
+#endif
